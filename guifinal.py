from tkinter import *
from tkinter import filedialog
import tkinter as tk
import numpy as np
import matplotlib.pyplot as plt
import h5py
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import Flatten
from keras.layers.convolutional import Conv2D
from keras.layers.convolutional import MaxPooling2D
from keras.utils import np_utils
from keras import backend as K
from keras.models import load_model 
from keras.utils.vis_utils import plot_model
from keras.preprocessing.image import ImageDataGenerator
import cv2
import os
from sklearn.model_selection import train_test_split
from tkinter import messagebox
K.set_image_data_format('channels_last')

model=1
path="img.png"
# GUI Setup
window = tk.Tk()
window.title("Breast Cancer Detection using Deep Learning")


screen_width = window.winfo_screenwidth()
screen_height = window.winfo_screenheight()
window_width = 1200
window_height = 700
center_x = int(screen_width/2 - window_width/2)
center_y = int(screen_height/2 - window_height/2)

window.geometry(f'{window_width}x{window_height}+{center_x}+{center_y}')

# load data
numepochs=5
batchsize=128
folder_path = './data/'
images = []
labels = []
class_label = 0

datagen = ImageDataGenerator(
    rotation_range=20,
    width_shift_range=0.1,
    height_shift_range=0.1,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest')

def load_images_from_folder(folder,class_label):
	for filename in os.listdir(folder):
		img = cv2.imread(os.path.join(folder, filename))
		if img is not None:
			img = cv2.resize(img,(140,92))
			img = img.reshape(92,140,3)
			images.append(img)
			labels.append(class_label)
	class_label=class_label+1
	return class_label


# define the larger model
def larger_model():
	# create model
	model = Sequential()
	model.add(Conv2D(32, (3, 3), padding="same",input_shape=(92,140,3), activation='relu'))
	#model.add(Conv2D(32, (3, 3), activation='relu',padding = 'same'))
	model.add(MaxPooling2D(pool_size=(2, 2)))
	model.add(Conv2D(32, (3, 3), activation='relu',padding = 'same'))
	#model.add(Conv2D(64, (3, 3), activation='relu',padding = 'same'))
	model.add(MaxPooling2D(pool_size=(2, 2)))
	model.add(Conv2D(64, (3, 3), activation='relu',padding = 'same'))
	#model.add(Conv2D(128, (3, 3), activation='relu',padding = 'same'))
	model.add(MaxPooling2D(pool_size=(2, 2)))
	model.add(Dropout(0.5))
	model.add(Flatten())
	model.add(Dropout(0.5))
	model.add(Dense(64, activation='relu'))
	model.add(Dropout(0.5))
	model.add(Dense(64, activation='relu'))
	model.add(Dropout(0.5))
	#model.add(Dense(50, activation='relu'))
	#model.add(Dropout(0.2))
	model.add(Dense(2, activation='softmax'))
	# Compile model
	model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
	return model


class_label = 0
class_label = load_images_from_folder(folder_path+'benign',class_label)
class_label = load_images_from_folder(folder_path+'malignant',class_label)

Data = np.asarray(images)
Labels = np.asarray(labels)

X_train,X_test,y_train,y_test=train_test_split(Data,Labels,test_size=0.2,random_state=2)

# normalize inputs from 0-255 to 0-1
X_train = X_train / 255
X_test = X_test / 255
# one hot encode outputs
y_train = np_utils.to_categorical(y_train)
y_test = np_utils.to_categorical(y_test)
num_classes = y_test.shape[1]

tr="train data shape:"+"\n"
tr=tr+"test data shape:"+"\n"
tr=tr+str(X_test.shape)+"\n"
tr=tr+"train label shape:"+"\n"
tr=tr+str(y_train.shape)+"\n"
tr=tr+"test label shape:"+"\n"
tr=tr+str(y_test.shape)+"\n"

def training(X_train, y_train, X_test, y_test, tr):
    global hist, model
    model = larger_model()
    
    # Fit the augmentation to our training data
    datagen.fit(X_train)
    
    # Train the model on the batches generated by datagen.flow()
    hist = model.fit(
        datagen.flow(X_train, y_train, batch_size=batchsize),
        steps_per_epoch=len(X_train) // batchsize,
        epochs=numepochs,
        validation_data=(X_test, y_test))
    
    model.summary()
    scores = model.evaluate(X_test, y_test, verbose=1, batch_size=batchsize)
    model.save('28april.h5')
    print(f"Deep Net Accuracy: {scores[1]*100:.2f}%")
    
    greetings_disp = tk.Text(master=window, height=20, width=120, fg="white")
    greetings_disp.grid(column=0, row=3)
    ly = ""
    for layer in model.layers:
        ly += f"{layer.name}        layer input: {layer.input}\n"
    greetings_disp.insert(tk.END, f"<<--LAYER ARCHITECTURE-->>\n\n{ly}\n\nNETWORK is trained with Accuracy of {scores[1]*100:.2f}%")
    return model

def graphh():

	# visualizing losses and accuracy
	train_loss=hist.history['loss']
	val_loss=hist.history['val_loss']
	train_acc = hist.history['accuracy']
	val_acc = hist.history['val_accuracy']
	xc=range(numepochs)

	plt.figure(1,figsize=(10,5))
	plt.subplot(121)
	plt.plot(xc,train_loss)
	plt.plot(xc,val_loss)
	plt.xlabel('num of Epochs')
	plt.ylabel('loss')
	plt.title('train_loss vs val_loss')
	plt.grid(True)
	plt.legend(['train','val'])
	plt.style.use(['classic'])

	#plt.figure(2,figsize=(7,5))
	plt.subplot(122)
	plt.plot(xc,train_acc)
	plt.plot(xc,val_acc)
	plt.xlabel('num of Epochs')
	plt.ylabel('accuracy')
	plt.title('train_acc vs val_acc')
	plt.grid(True)

	plt.legend(['train','val'],loc=4)
	plt.style.use(['classic'])
	plt.show()
	
def test_test(model):
    test_image = X_test[0:1]
    pa = model.predict(test_image)
    predicted_class = np.argmax(pa, axis=1)
    if predicted_class[0] == 0:
        s = f"BENIGN with Accuracy: {pa[0][0]*100:.2f}%\n"
    else:
        s = f"MALIGNANT with Accuracy: {pa[0][1]*100:.2f}%\n"
    return s

def test_random(model, path):
    if not isinstance(model, Sequential):
        return "Error: Model not initialized. Please train the model first."
    
    test_image = cv2.imread(path)
    if test_image is None:
        return "Error: Unable to read the image file. Please check the file path and format."
    
    try:
        test_image = cv2.resize(test_image, (140, 92))
        test_image = test_image.reshape(1, 92, 140, 3)
        test_image = test_image.astype('float32') / 255
        pa = model.predict(test_image)
        predicted_class = np.argmax(pa, axis=1)
        if predicted_class[0] == 0:
            s = f"BENIGN with Accuracy: {pa[0][0]*100:.2f}%\n"
        else:
            s = f"MALIGNANT with Accuracy: {pa[0][1]*100:.2f}%\n"
    except Exception as e:
        s = f"Error processing the image: {str(e)}\n"
    return s

def b_test_test():
	greetings=test_test(model)
	#create text field
	greetings_disp =tk.Text(master=window,height=1,width=45 ,fg="white")
	greetings_disp.grid(column=0,row=6)
	greetings_disp.insert(tk.END , greetings)

def b_random_test_show():
	global path1
	path=filedialog.askopenfilename(filetypes=(("JPG", ".jpg"), ("All files", "*.*")))
	path1=path
	img=cv2.imread(path1)
	plt.imshow(img)
	plt.show()
	#greetings_disp =tk.Text(master=window,height=0,width=0 ,fg="white")
	#greetings_disp.grid(column=0,row=10)
	#greetings_disp.insert(tk.END , greetings)

def b_random_test():
    global model
    if not isinstance(model, Sequential):
        tk.messagebox.showerror("Error", "Model not initialized. Please train the model first.")
        return
    
    path = filedialog.askopenfilename(filetypes=(("Image files", "*.jpg *.jpeg *.png *.bmp *.tif *.tiff"), ("All files", "*.*")))
    if not path:  # User cancelled file selection
        return
    
    greetings = test_random(model, path)
    greetings_disp = tk.Text(master=window, height=1, width=45, fg="white")
    greetings_disp.grid(column=0, row=12)
    greetings_disp.insert(tk.END, greetings)
    
    try:
        img = cv2.imread(path)
        if img is not None:
            plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
            plt.show()
        else:
            print("Error: Unable to display the image.")
    except Exception as e:
        print(f"Error displaying the image: {str(e)}")

def b_training():
    global model
    model = training(X_train, y_train, X_test, y_test, tr)

labelfont=('Arial', 40, 'bold')
label1 = tk.Label(text="   Breast Cancer Detection using Deep Learning     ", anchor='n', font=labelfont , fg="midnight blue" , bg="mint cream")
label1.grid(column=0,row=0)

#buttons

button1 = tk.Button(text="Start Training" , command= b_training , bg="powder blue")
button1.grid(column=0,row=2)

button2 = tk.Button(text="Test an Image from Dataset" , command=b_test_test , bg="powder blue")
button2.grid(column=0,row=5)

'''button3 = tk.Button(text="Display an Image" , command= b_random_test_show , bg="powder blue")
button3.grid(column=0,row=8)'''

button4 = tk.Button(text="Select an Image for Testing" , command= b_random_test, bg="powder blue")
button4.grid(column=0,row=11)

button5 = tk.Button(text="See Loss and Accuracy plots" , command= graphh, bg="powder blue")
button5.grid(column=0,row=13)

window.mainloop()






